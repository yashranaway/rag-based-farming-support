Temporary / Dev-only Components (to replace or harden before production)
======================================================================

External APIs and Data Sources (target, prefer free tiers)
---------------------------------------------------------
- Weather (IMD or alternatives):
  - IMD public bulletins/FTP where allowed; fallback: Open-Meteo (free, no key), OpenWeatherMap (free tier).
- Market Prices (Mandi/eNAM):
  - eNAM public dashboards/CSV endpoints where available; state agri boards with public price feeds.
- Govt Advisories/Schemes:
  - agrisnet.gov.in, icar.org.in, kvk.icar.gov.in, state agri department advisories, PIB press releases.
- Soil/Agri Knowledge Bases:
  - ICAR publications, FAO manuals (public), Krishi Vigyan Kendra resources.
- Geocoding/Reverse geocoding (for production mapping only):
  - Nominatim (OpenStreetMap) free tier with rate limits; Google Maps (paid after free), OpenCage (free tier).

1) Language Detection (heuristic)
   - File: app/services/lang.py (detect_language)
   - Status: Lightweight Unicode-block heuristic for Indian scripts; not ML-grade.
   - Replace with: Robust detector (fastText, lingua, or Granite text-classification) with proper evaluation.

2) In-Memory Upsert Store
   - File: app/services/ingestion.py (UpsertStore)
   - Status: Volatile, single-process memory; no persistence or concurrency.
   - Replace with: Vector DB (Milvus/OpenSearch) and object store/DB for docs.

3) InMemoryRetriever (keyword-based)
   - File: app/services/retrieval.py (InMemoryRetriever)
   - Status: Simple token frequency scorer; no embeddings or BM25.
   - Replace with: Embedding-based retriever (Granite embeddings + vector store), optional BM25 fallback.

4) PromptBuilder (basic)
   - File: app/services/prompting.py (PromptBuilder)
   - Status: Minimal context formatting; no safety filters or guardrails.
   - Replace with: Production prompt templates, safety/guardrail layers, and token budgeting.

5) QueryOrchestrator (basic, feature-flagged)
   - File: app/services/orchestrator.py (QueryOrchestrator)
   - Status: Linear flow with intent classification, external signals (weather/mandi), safety intercept, and streaming. Lacks observability, retries, and circuit breakers.
   - Replace with: Orchestrator with tracing/metrics, retries/backoff, policy checks, and robust error handling.

6) Granite adapters (stubs)
   - File: app/services/llm.py (GraniteWatsonXAdapter, GraniteReplicateAdapter, FakeAdapter)
   - Status: No network calls; deterministic stub responses with streaming, temperature/max_tokens/stop, and simulated error modes.
   - Replace with: Real clients to Granite providers; robust streaming, rate-limit handling, and telemetry.

7) Connectors (mock-first)
   - File: app/services/connectors.py (WeatherClient, MandiClient, SoilClient, GovtClient)
   - Status: Returns canned/mock data.
   - Replace with: Actual API integrations (IMD, eNAM, ICAR/KVK, govt portals), caching, and auth.

8) Tests relying on stubs
   - Files: tests/test_*.py referencing FakeAdapter, InMemoryRetriever, UpsertStore, mock connectors.
   - Status: Unit tests target scaffolding; no integration tests.
   - Replace with: Integration tests against staging services and vector DB; contract tests for connectors.

9) /v1/query (feature-flagged orchestration)
   - File: app/api/routes.py
   - Status: Orchestrated RAG path when FEATURE_ORCHESTRATOR=1; placeholder response when disabled.
   - Replace with: Always-on orchestrated path plus localized phrasing and diagnostics.

10) Location normalization (basic)
    - File: app/services/location.py
    - Status: Simple validation/normalization; no geocoding, no pincode-to-district mapping.
    - Replace with: Geocoding/administrative mapping, canonical region taxonomy, and error handling.

11) TemplateRegistry (in-memory)
    - File: app/services/templates.py
    - Status: Versioned prompt/policy templates stored in-process without persistence.
    - Replace with: Persistent template store (DB/files), audit logs, and access controls.

12) Admin endpoints (dev-only, unauthenticated)
    - File: app/api/routes.py (/v1/admin/*)
    - Status: Reindex endpoint and template CRUD/rollback without auth or rate limits.
    - Replace with: AuthN/Z, rate limiting, request validation, and audit trail.

13) Evaluation harness (dev-only heuristics)
    - File: app/services/eval.py
    - Status: Heuristic metrics (groundedness/relevance/citation accuracy) over a small JSONL dataset; uses current stubs.
    - Replace with: Robust eval with gold references, model-graded judgments, corpus-level reports, and CI gating; optional admin endpoint `/v1/admin/eval` with auth.

14) Rate limiting middleware (dev-only)
    - File: app/main.py (rate_limit_middleware)
    - Status: Simple in-memory sliding window, per-IP; disabled by default (enable with RATE_LIMIT_ENABLED=1). Not suitable for multi-instance deployments.
    - Replace with: External/shared rate limiter (e.g., Redis token bucket) with per-key quotas and real client identifiers; integrate with API gateway.
